@model ASM.Models.ExportSlipViewModel

@{
    ViewData["Title"] = "Tạo Phiếu Xuất Kho";
}

<div class="modal fade" id="quickCreateCustomerModal" tabindex="-1" aria-labelledby="modalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalLabel">Tạo Nhanh Khách Hàng Mới</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="quickCreateCustomerForm">
                    <div id="modal-error-message" class="alert alert-danger d-none"></div>
                    <div class="mb-3">
                        <label class="form-label">Họ đệm</label>
                        <input type="text" id="new-customer-lastname" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Tên</label>
                        <input type="text" id="new-customer-firstname" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Số điện thoại</label>
                        <input type="tel" id="new-customer-phone" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Email</label>
                        <input type="email" id="new-customer-email" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Địa chỉ</label>
                        <input type="text" id="new-customer-address" class="form-control" placeholder="Số nhà, đường, phường/xã..." required />
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" id="saveNewCustomerBtn" class="btn btn-primary">Lưu khách hàng</button>
            </div>
        </div>
    </div>
</div>


<div class="card shadow border-0 rounded-lg mt-4">
    <div class="card-header bg-primary text-white text-center">
        <h3 class="mb-0">@ViewData["Title"]</h3>
    </div>
    <div class="card-body p-4">
        <form asp-action="Create" method="post">
            <div asp-validation-summary="ModelOnly" class="alert alert-danger" style="@(ViewData.ModelState.IsValid ? "display:none;" : "")"></div>
            <div class="row">
                <div class="col-md-4 mb-3">
                    <label asp-for="ExportSlipCode" class="form-label fw-bold"></label>
                    <input asp-for="ExportSlipCode" class="form-control" readonly style="background-color: #e9ecef;" />
                </div>
                <div class="col-md-4 mb-3">
                    <label asp-for="ExportDate" class="form-label fw-bold"></label>
                    <input asp-for="ExportDate" class="form-control" type="datetime-local" />
                    <span asp-validation-for="ExportDate" class="text-danger"></span>
                </div>
                <div class="col-md-4 mb-3">
                    <label asp-for="CustomerId" class="form-label fw-bold"></label>
                    <div class="input-group">
                        <select asp-for="CustomerId" id="customer-select" class="form-select"></select>
                        <button class="btn btn-outline-success" type="button" data-bs-toggle="modal" data-bs-target="#quickCreateCustomerModal" title="Tạo khách hàng mới">
                            <i class="fa fa-plus"></i>
                        </button>
                    </div>
                    <span asp-validation-for="CustomerId" class="text-danger"></span>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12 mb-3">
                    <label asp-for="Reason" class="form-label fw-bold"></label>
                    <input asp-for="Reason" class="form-control" placeholder="VD: Bán lẻ cho khách hàng A, Xuất hàng cho chi nhánh B..." />
                    <span asp-validation-for="Reason" class="text-danger"></span>
                </div>
            </div>
            <hr />
            <h4>Chi tiết sản phẩm xuất kho</h4>
            <table class="table table-bordered" id="productDetailsTable">
                <thead class="table-light">
                    <tr>
                        <th style="width:50%">Sản phẩm</th>
                        <th>Tồn kho</th>
                        <th>Số lượng xuất</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
            <button type="button" id="addProductBtn" class="btn btn-success mt-2">
                <i class="fa fa-plus me-2"></i>Thêm sản phẩm
            </button>
            <hr />
            <div class="d-flex justify-content-end gap-2">
                <a asp-action="Index" class="btn btn-secondary">Hủy</a>
                <button type="submit" class="btn btn-primary">Lưu Phiếu Xuất</button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>

    <script>
        $(function () {
            function getAntiForgeryToken() {
                return $('form[action="@Url.Action("Create")"] input[name="__RequestVerificationToken"]').val();
            }

            $('#customer-select').select2({
                placeholder: "-- Tìm kiếm khách hàng theo tên hoặc SĐT --",
                ajax: {
                    url: "@Url.Action("SearchCustomers", "Export")",
                    dataType: 'json',
                    delay: 250,
                    data: function (params) {
                        return { term: params.term };
                    },
                    processResults: function (data) {
                        return { results: data.results };
                    }
                }
            });

            $('#saveNewCustomerBtn').on('click', function() {
                const newCustomer = {
                    lastName: $('#new-customer-lastname').val(),
                    firstName: $('#new-customer-firstname').val(),
                    phoneNumber: $('#new-customer-phone').val(),
                    email: $('#new-customer-email').val(),
                    addressLine1: $('#new-customer-address').val()
                };

                $.ajax({
                    url: '@Url.Action("QuickCreateCustomer", "Export")',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(newCustomer),
                    headers: {
                        "RequestVerificationToken": getAntiForgeryToken()
                    },
                    success: function(response) {
                        const newOption = new Option(response.text, response.id, true, true);
                        $('#customer-select').append(newOption).trigger('change');

                        var modal = bootstrap.Modal.getInstance(document.getElementById('quickCreateCustomerModal'));
                        modal.hide();
                        $('#quickCreateCustomerForm')[0].reset();
                        $('#modal-error-message').addClass('d-none').text('');
                    },
                    error: function(xhr) {
                        const error = xhr.responseJSON;
                        $('#modal-error-message').removeClass('d-none').text(error.message || "Đã xảy ra lỗi không xác định.");
                    }
                });
            });

            let productIndex = 0;
            const productOptions = `@Html.Raw(string.Join("", ((SelectList)ViewBag.ProductList).Select(item => $"<option value='{item.Value}'>{item.Text}</option>")))`;

            function addRow() {
                let row = `
                <tr>
                    <td>
                        <select name="Details[${productIndex}].ProductId" class="form-select product-select" required>
                            <option value="">-- Chọn sản phẩm --</option>
                            ${productOptions}
                        </select>
                    </td>
                    <td><input type="number" class="form-control stock" readonly style="background-color: #e9ecef;" /></td>
                    <td>
                        <input type="number" name="Details[${productIndex}].Quantity" class="form-control qty" min="1" required />
                        <div class="text-danger small msg"></div>
                    </td>
                    <td class="text-center"><button type="button" class="btn btn-danger btn-sm remove-row">X</button></td>
                </tr>`;
                $("#productDetailsTable > tbody").append(row); // Sửa lại để đảm bảo thêm vào tbody
                productIndex++;
            }

            $("#addProductBtn").click(addRow);

            $("#productDetailsTable").on("change", ".product-select", function () {
                let row = $(this).closest("tr");
                let productId = $(this).val();
                if (!productId) {
                    row.find(".stock").val('');
                    row.find(".qty").val('').attr("max", "");
                    return;
                }
                $.get('@Url.Action("GetProductStock", "Export")', { productId: productId }, function (res) {
                    if (res.quantity !== undefined) {
                        row.find(".stock").val(res.quantity);
                        row.find(".qty").attr("max", res.quantity);
                    }
                });
            });

            $("#productDetailsTable").on("input", ".qty", function () {
                let max = parseInt($(this).attr("max"));
                let val = parseInt($(this).val());
                let msg = $(this).siblings(".msg");
                if (val > max) {
                    msg.text(`Tồn kho chỉ còn ${max}`);
                } else {
                    msg.text("");
                }
            });

            $("#productDetailsTable").on("click", ".remove-row", function () {
                $(this).closest("tr").remove();
                $("#productDetailsTable tbody tr").each(function (i, tr) {
                    $(tr).find("select, input").each(function () {
                        if (this.name) this.name = this.name.replace(/\[\d+\]/, `[${i}]`);
                    });
                });
                productIndex = $("#productDetailsTable tbody tr").length;
            });

            addRow();
        });
    </script>
}